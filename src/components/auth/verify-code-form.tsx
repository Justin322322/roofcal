"use client";

import { useState, useEffect, useRef } from "react";
import Link from "next/link";
import { useSearchParams } from "next/navigation";
import { useSession } from "next-auth/react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { toast } from "sonner";

import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import OTPInput from "@/components/ui/otp-input";
import { LoadingButton } from "@/components/ui/loading-button";
import FormError from "@/components/ui/form-error";
import FormSuccess from "@/components/ui/form-success";
import AuthLayout from "@/components/auth/auth-layout";

const verifySchema = z.object({
  code: z.string().length(6, "Code must be 6 digits"),
});

type VerifyFormData = z.infer<typeof verifySchema>;

export default function VerifyCodeForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [isResending, setIsResending] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [otpValue, setOtpValue] = useState("");
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [cooldownTime, setCooldownTime] = useState(0);
  const [isOnCooldown, setIsOnCooldown] = useState(false);
  const cooldownTimerRef = useRef<NodeJS.Timeout | null>(null);
  const searchParams = useSearchParams();
  const { data: session, update } = useSession();

  // Get email from session (if user is logged in) or from URL params (if coming from signup)
  const email = session?.user?.email || searchParams.get("email");

  const form = useForm<VerifyFormData>({
    resolver: zodResolver(verifySchema),
    defaultValues: {
      code: "",
    },
  });

  // Check rate limit status and auto-generate OTP when component mounts
  useEffect(() => {
    const initializeOTP = async () => {
      if (
        email &&
        session?.user &&
        !session.user.emailVerified &&
        !hasAutoGenerated
      ) {
        setHasAutoGenerated(true);

        // First check rate limit status
        try {
          const rateLimitRes = await fetch("/api/auth/rate-limit-status", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email }),
          });

          if (rateLimitRes.ok) {
            const rateLimitData = await rateLimitRes.json();
            if (rateLimitData.isLimited) {
              setCooldownTime(rateLimitData.remainingTime || 30);
              setIsOnCooldown(true);
              startCooldownTimer(rateLimitData.remainingTime || 30);
              return;
            }
          }
        } catch (error) {
          console.error("Failed to check rate limit status:", error);
        }

        // If not rate limited, try to auto-generate OTP
        try {
          const res = await fetch("/api/auth/resend-code", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email }),
          });

          if (res.ok) {
            toast.success("Verification code sent to your email!");
            // Start cooldown timer after successful generation
            setCooldownTime(30);
            setIsOnCooldown(true);
            startCooldownTimer(30);
          } else {
            const errorData = await res.json().catch(() => ({}));
            if (errorData.code === "RATE_LIMIT_EXCEEDED") {
              setCooldownTime(errorData.remainingTime || 30);
              setIsOnCooldown(true);
              startCooldownTimer(errorData.remainingTime || 30);
            } else {
              console.error("Failed to auto-generate OTP");
              toast.error(
                "We couldn't send the verification code automatically. Please use Resend."
              );
            }
          }
        } catch (error) {
          console.error("Failed to auto-generate OTP:", error);
          toast.error(
            "We couldn't send the verification code automatically. Please use Resend."
          );
        }
      }
    };

    initializeOTP();
  }, [email, session, hasAutoGenerated]);

  // Cleanup interval on unmount
  useEffect(() => {
    return () => {
      if (cooldownTimerRef.current) {
        clearInterval(cooldownTimerRef.current);
      }
    };
  }, []);

  // Cooldown timer function
  const startCooldownTimer = (seconds: number) => {
    // Clear any existing timer
    if (cooldownTimerRef.current) {
      clearInterval(cooldownTimerRef.current);
    }

    let remaining = seconds;
    setCooldownTime(remaining);
    setIsOnCooldown(true);

    const timer = setInterval(() => {
      remaining--;
      setCooldownTime(remaining);

      if (remaining <= 0) {
        clearInterval(timer);
        cooldownTimerRef.current = null;
        setIsOnCooldown(false);
        setCooldownTime(0);
      }
    }, 1000);

    // Store the timer ID in the ref
    cooldownTimerRef.current = timer;
  };

  const handleOtpChange = (value: string) => {
    setOtpValue(value);
    form.setValue("code", value);
  };

  const onSubmit = async (data: VerifyFormData) => {
    if (!email) {
      setErrorMessage("Email not found. Please log in again.");
      return;
    }

    setIsLoading(true);
    setErrorMessage(null);
    setSuccessMessage(null);

    try {
      const res = await fetch("/api/auth/verify-code", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, code: data.code }),
      });

      if (!res.ok) {
        const body = await res.json().catch(() => ({}));
        setErrorMessage(body?.error ?? "Invalid or expired code");
        return;
      }

      // If user is authenticated, update session then redirect to dashboard
      if (session?.user) {
        try {
          await update();
          setSuccessMessage("Email verified successfully!");
          toast.success("Email verified successfully!");
          setTimeout(() => {
            window.location.href = "/dashboard";
          }, 1000);
        } catch (error) {
          console.error("Failed to update session:", error);
          setSuccessMessage("Email verified successfully!");
          toast.success("Email verified successfully!");
          setTimeout(() => {
            window.location.href = "/dashboard";
          }, 1000);
        }
      } else {
        // If user is not authenticated (e.g., coming from signup), send to login first
        setSuccessMessage("Email verified successfully! Please sign in.");
        toast.success("Email verified successfully! Please sign in.");
        setTimeout(() => {
          window.location.href = "/login?verified=1";
        }, 800);
      }
    } catch {
      setSuccessMessage("");
      setErrorMessage("Something went wrong. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendCode = async () => {
    if (!email) {
      setErrorMessage("Email not found. Cannot resend code.");
      return;
    }

    if (isOnCooldown) {
      setErrorMessage(
        `Please wait ${cooldownTime} seconds before requesting another code.`
      );
      return;
    }

    setIsResending(true);
    setErrorMessage(null);
    setSuccessMessage(null);

    try {
      const res = await fetch("/api/auth/resend-code", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });

      if (!res.ok) {
        const body = await res.json().catch(() => ({}));

        if (body.code === "RATE_LIMIT_EXCEEDED") {
          const remainingTime = body.remainingTime || 30;
          setCooldownTime(remainingTime);
          setIsOnCooldown(true);
          startCooldownTimer(remainingTime);
          setErrorMessage(
            `Too many requests. Please wait ${remainingTime} seconds before requesting another code.`
          );
        } else {
          setErrorMessage(body?.error ?? "Failed to resend code");
        }
        return;
      }

      setSuccessMessage("New code sent to your email!");
      // Clear OTP inputs
      setOtpValue("");
      form.setValue("code", "");

      // Start cooldown timer after successful generation
      setCooldownTime(30);
      setIsOnCooldown(true);
      startCooldownTimer(30);
    } catch {
      setErrorMessage("Failed to resend code. Please try again.");
    } finally {
      setIsResending(false);
    }
  };

  return (
    <AuthLayout
      brandingTitle="Verify Your Email to Get Started"
      brandingDescription="We've sent a verification code to your email address. Enter it below to complete your account setup."
    >
      <div className="w-full max-w-md space-y-8">
        <Card>
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl font-bold text-center">
              Verify Your Email
            </CardTitle>
            <CardDescription className="text-center">
              Enter the 6-digit code sent to {email || "your email"}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div className="space-y-2">
                <Label>Verification Code</Label>
                <OTPInput
                  value={otpValue}
                  onChange={handleOtpChange}
                  disabled={isLoading}
                />
                {form.formState.errors.code && (
                  <p className="text-sm text-red-600 text-center">
                    {form.formState.errors.code.message}
                  </p>
                )}
              </div>
              <FormError message={errorMessage} />
              <FormSuccess message={successMessage} />
              <LoadingButton
                type="submit"
                className="w-full"
                loading={isLoading}
                loadingText="Verifying..."
              >
                Verify Code
              </LoadingButton>
            </form>
            <div className="mt-6">
              <Separator className="my-4" />
              <div className="text-center space-y-2">
                <p className="text-sm text-muted-foreground">
                  Didn&apos;t receive the code?
                </p>
                <LoadingButton
                  variant="outline"
                  onClick={handleResendCode}
                  loading={isResending}
                  loadingText="Sending..."
                  disabled={isOnCooldown || isResending}
                  className="w-full"
                >
                  {isOnCooldown ? `Wait ${cooldownTime}s` : "Resend Code"}
                </LoadingButton>
                {isOnCooldown && (
                  <p className="text-xs text-muted-foreground">
                    Please wait {cooldownTime} seconds before requesting another
                    code
                  </p>
                )}
                <p className="text-sm text-muted-foreground">
                  Back to{" "}
                  <Link href="/login" className="text-primary hover:underline">
                    Sign in
                  </Link>
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </AuthLayout>
  );
}
